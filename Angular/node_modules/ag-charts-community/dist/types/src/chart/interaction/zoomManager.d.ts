import type { AgZoomRange, AgZoomRatio } from 'ag-charts-types';
import type { MementoOriginator } from '../../api/state/memento';
import { BaseManager } from '../baseManager';
import { ChartAxisDirection } from '../chartAxisDirection';
import type { LayoutManager } from '../layout/layoutManager';
export interface ZoomState {
    min: number;
    max: number;
}
export interface AxisZoomState {
    x?: ZoomState;
    y?: ZoomState;
}
export interface DefinedZoomState {
    x: ZoomState;
    y: ZoomState;
}
export type ZoomMemento = {
    rangeX?: AgZoomRange;
    rangeY?: AgZoomRange;
    ratioX?: AgZoomRatio;
    ratioY?: AgZoomRatio;
};
export interface ZoomChangeEvent extends AxisZoomState {
    type: 'zoom-change';
    callerId: string;
    axes: Record<string, ZoomState | undefined>;
}
export interface ZoomPanStartEvent {
    type: 'zoom-pan-start';
    callerId: string;
}
export interface ZoomRestoreEvent extends ZoomMemento {
    type: 'restore-zoom';
}
export type ChartAxisLike = {
    id: string;
    direction: ChartAxisDirection;
    visibleRange: [number, number];
};
type ZoomEvents = ZoomChangeEvent | ZoomPanStartEvent | ZoomRestoreEvent;
/**
 * Manages the current zoom state for a chart. Tracks the requested zoom from distinct dependents
 * and handles conflicting zoom requests.
 */
export declare class ZoomManager extends BaseManager<ZoomEvents['type'], ZoomEvents> implements MementoOriginator<ZoomMemento> {
    mementoOriginatorKey: "zoom";
    private readonly axisZoomManagers;
    private readonly state;
    private readonly rejectCallbacks;
    private axes?;
    addLayoutListeners(layoutManager: LayoutManager): void;
    createMemento(): {
        rangeX: {
            start: any;
            end: any;
        } | undefined;
        rangeY: {
            start: any;
            end: any;
        } | undefined;
        ratioX: {
            start: number;
            end: number;
        };
        ratioY: {
            start: number;
            end: number;
        };
    };
    guardMemento(blob: unknown): blob is ZoomMemento;
    restoreMemento(_version: string, _mementoVersion: string, memento: ZoomMemento): void;
    updateAxes(axes: Array<ChartAxisLike>): void;
    updateZoom(callerId: string, newZoom?: AxisZoomState, canChangeInitial?: boolean, rejectCallback?: (stateId: string) => void): void;
    updateAxisZoom(callerId: string, axisId: string, newZoom?: ZoomState): void;
    fireZoomPanStartEvent(callerId: string): void;
    getZoom(): AxisZoomState | undefined;
    getAxisZoom(axisId: string): ZoomState;
    getAxisZooms(): Record<string, {
        direction: ChartAxisDirection;
        zoom: ZoomState | undefined;
    }>;
    private applyChanges;
    private getRangeDirection;
    private getDefinedZoom;
}
export {};
