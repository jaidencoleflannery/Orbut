import { BBox } from './bbox';
import type { ZIndexSubOrder } from './layersManager';
import type { ChildNodeCounts, RenderContext } from './node';
import { Node } from './node';
export declare class Group extends Node {
    protected readonly opts?: {
        readonly name?: string | undefined;
        readonly isVirtual?: boolean | undefined;
        readonly zIndex?: number | undefined;
        readonly zIndexSubOrder?: ZIndexSubOrder | undefined;
        readonly layer?: boolean | undefined;
    } | undefined;
    static className: string;
    static is(value: unknown): value is Group;
    static computeChildrenBBox(nodes: Iterable<Node>, skipInvisible?: boolean): BBox;
    protected static compareChildren(a: Node, b: Node): number;
    protected clipRect?: BBox;
    opacity: number;
    constructor(opts?: {
        readonly name?: string | undefined;
        readonly isVirtual?: boolean | undefined;
        readonly zIndex?: number | undefined;
        readonly zIndexSubOrder?: ZIndexSubOrder | undefined;
        readonly layer?: boolean | undefined;
    } | undefined);
    containsPoint(_x: number, _y: number): boolean;
    protected computeBBox(): BBox;
    preRender(): ChildNodeCounts;
    protected isDirty(renderCtx: RenderContext): {
        isDirty: boolean;
        isChildDirty: boolean;
        isChildLayerDirty: boolean;
    };
    protected debugSkip(renderCtx: RenderContext): void;
    render(renderCtx: RenderContext, skip?: boolean): void;
    protected sortedChildren(): Iterable<Node>;
    protected renderClip(renderCtx: RenderContext): BBox | undefined;
    protected renderChildren(children: Iterable<Node>, renderCtx: RenderContext): void;
    /**
     * Transforms bbox given in the canvas coordinate space to bbox in this group's coordinate space and
     * sets this group's clipRect to the transformed bbox.
     * @param bbox clipRect bbox in the canvas coordinate space.
     */
    setClipRect(bbox?: BBox): void;
    /**
     * Set the clip rect within the canvas coordinate space.
     * @param bbox clipRect bbox in the canvas coordinate space.
     */
    setClipRectCanvasSpace(bbox?: BBox): void;
    toSVG(): {
        elements: SVGElement[];
        defs?: SVGElement[];
    } | undefined;
}
declare const ScalableGroup_base: new (...args: any[]) => import("./transformable").ScalableType<Group>;
export declare class ScalableGroup extends ScalableGroup_base {
}
declare const RotatableGroup_base: new (...args: any[]) => import("./transformable").RotatableType<Group>;
export declare class RotatableGroup extends RotatableGroup_base {
}
declare const TranslatableGroup_base: new (...args: any[]) => import("./transformable").TranslatableType<Group>;
export declare class TranslatableGroup extends TranslatableGroup_base {
}
declare const TransformableGroup_base: new (...args: any[]) => import("./transformable").RotatableType<import("./transformable").TranslatableType<Group>>;
export declare class TransformableGroup extends TransformableGroup_base {
}
export {};
