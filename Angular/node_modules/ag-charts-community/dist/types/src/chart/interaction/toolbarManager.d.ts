import type { AgIconName, AgToolbarOptions } from 'ag-charts-types';
import type { DOMManager } from '../../dom/domManager';
import type { BBox } from '../../scene/bbox';
import { BaseManager } from '../baseManager';
import { type ToolbarAnchor, type ToolbarGroup } from '../toolbar/toolbarTypes';
type EventTypes = 'button-pressed' | 'button-toggled' | 'button-updated' | 'button-moved' | 'cancelled' | 'floating-anchor-changed' | 'group-toggled' | 'group-updated' | 'group-moved' | 'proxy-group-options';
type ToolbarEvent = ToolbarButtonPressedEvent | ToolbarButtonToggledEvent | ToolbarButtonUpdatedEvent | ToolbarButtonMovedEvent | ToolbarCancelledEvent | ToolbarFloatingAnchorChangedEvent | ToolbarGroupToggledEvent | ToolbarGroupUpdatedEvent | ToolbarGroupMovedEvent | ToolbarProxyGroupOptionsEvent;
type ToolbarEventButtonValue<T extends ToolbarGroup> = NonNullable<NonNullable<AgToolbarOptions[T]>['buttons']>[number]['value'];
interface ToolbarBaseEvent<T extends EventTypes> {
    type: T;
    group: ToolbarGroup;
}
export interface ToolbarGroupToggledEvent extends ToolbarBaseEvent<'group-toggled'> {
    caller: string;
    active: boolean | undefined;
    visible: boolean | undefined;
}
export interface ToolbarGroupUpdatedEvent extends ToolbarBaseEvent<'group-updated'> {
}
export interface ToolbarGroupMovedEvent extends ToolbarBaseEvent<'group-moved'> {
}
export interface ToolbarCancelledEvent extends ToolbarBaseEvent<'cancelled'> {
}
export interface ToolbarFloatingAnchorChangedEvent extends ToolbarBaseEvent<'floating-anchor-changed'> {
    anchor: ToolbarAnchor;
}
export interface ToolbarButtonPressedEvent<T = any> extends ToolbarBaseEvent<'button-pressed'> {
    id: string;
    value: T;
    rect: BBox;
    sourceEvent: Event;
}
export interface ToolbarButtonToggledEvent<_T = any> extends ToolbarBaseEvent<'button-toggled'> {
    id: string;
    active: boolean;
    enabled: boolean;
    visible: boolean;
    checked: boolean;
}
export interface ToolbarButtonUpdatedEvent extends ToolbarBaseEvent<'button-updated'> {
    id: string;
    label?: string;
    icon?: AgIconName;
    fill?: string;
}
export interface ToolbarButtonMovedEvent<T = any> extends ToolbarBaseEvent<'button-moved'> {
    value: T;
    rect: BBox;
    groupRect: BBox;
}
export interface ToolbarProxyGroupOptionsEvent extends ToolbarBaseEvent<'proxy-group-options'> {
    caller: string;
    options: Partial<NonNullable<AgToolbarOptions[ToolbarGroup]>>;
}
export declare class ToolbarManager extends BaseManager<EventTypes, ToolbarEvent> {
    static isGroup<T extends ToolbarGroup>(group: T, event: ToolbarEvent): event is ToolbarButtonPressedEvent<ToolbarEventButtonValue<T>>;
    static isChildElement(domManager: DOMManager, element: HTMLElement): boolean;
    pressButton(group: ToolbarGroup, id: string, value: any, rect: BBox, sourceEvent: Event): void;
    cancel(group: ToolbarGroup): void;
    toggleButton<T extends ToolbarGroup>(group: T, id: string, options: {
        active?: boolean;
        enabled?: boolean;
        visible?: boolean;
        checked?: boolean;
    }): void;
    updateButton<T extends ToolbarGroup>(group: T, id: string, options: {
        label?: string;
        icon?: AgIconName;
        fill?: string;
        strokeWidth?: number;
    }): void;
    toggleGroup(caller: string, group: ToolbarGroup, options: {
        active?: boolean;
        visible?: boolean;
    }): void;
    updateGroup<T extends ToolbarGroup>(group: T): void;
    groupMoved<T extends ToolbarGroup>(group: T): void;
    changeFloatingAnchor(group: ToolbarGroup, anchor: ToolbarAnchor): void;
    buttonMoved(group: ToolbarGroup, value: any, rect: BBox, groupRect: BBox): void;
    proxyGroupOptions<T extends ToolbarGroup>(caller: string, group: T, options: Partial<AgToolbarOptions[T]>): void;
}
export {};
