import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { AgCharts as AgChartsAPI } from 'ag-charts-community';
import { AgChartsBase } from './ag-charts-base';
import * as i0 from "@angular/core";
// noinspection AngularIncorrectTemplateDefinition
export class AgGauge extends AgChartsBase {
    ngZone;
    options = { type: 'radial-gauge', value: 0 };
    onChartReady = new EventEmitter();
    constructor(elementDef, ngZone) {
        super();
        this.ngZone = ngZone;
        this._nativeElement = elementDef.nativeElement;
    }
    createChart(options) {
        return AgChartsAPI.createGauge(options);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: AgGauge, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: AgGauge, isStandalone: true, selector: "ag-gauge", inputs: { options: "options" }, outputs: { onChartReady: "onChartReady" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, encapsulation: i0.ViewEncapsulation.None });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: AgGauge, decorators: [{
            type: Component,
            args: [{
                    selector: 'ag-gauge',
                    standalone: true,
                    template: '',
                    encapsulation: ViewEncapsulation.None,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { options: [{
                type: Input
            }], onChartReady: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWctZ2F1Z2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvYWctY2hhcnRzLWFuZ3VsYXIvc3JjL2xpYi9hZy1nYXVnZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBYyxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU5RyxPQUFPLEVBQW1CLFFBQVEsSUFBSSxXQUFXLEVBQWtCLE1BQU0scUJBQXFCLENBQUM7QUFFL0YsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDOztBQUVoRCxrREFBa0Q7QUFPbEQsTUFBTSxPQUFPLE9BQVEsU0FBUSxZQUE0QjtJQVN2QztJQVBQLE9BQU8sR0FBbUIsRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQztJQUc3RCxZQUFZLEdBQWtDLElBQUksWUFBWSxFQUFFLENBQUM7SUFFeEUsWUFDSSxVQUFzQixFQUNaLE1BQWM7UUFFeEIsS0FBSyxFQUFFLENBQUM7UUFGRSxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBR3hCLElBQUksQ0FBQyxjQUFjLEdBQUcsVUFBVSxDQUFDLGFBQWEsQ0FBQztJQUNuRCxDQUFDO0lBRVMsV0FBVyxDQUFDLE9BQXVCO1FBQ3pDLE9BQU8sV0FBVyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM1QyxDQUFDO3dHQWpCUSxPQUFPOzRGQUFQLE9BQU8sc0tBSE4sRUFBRTs7NEZBR0gsT0FBTztrQkFObkIsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsVUFBVTtvQkFDcEIsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLFFBQVEsRUFBRSxFQUFFO29CQUNaLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2lCQUN4QztzSEFHVSxPQUFPO3NCQURiLEtBQUs7Z0JBSUMsWUFBWTtzQkFEbEIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgTmdab25lLCBPdXRwdXQsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IEFnQ2hhcnRJbnN0YW5jZSwgQWdDaGFydHMgYXMgQWdDaGFydHNBUEksIEFnR2F1Z2VPcHRpb25zIH0gZnJvbSAnYWctY2hhcnRzLWNvbW11bml0eSc7XG5cbmltcG9ydCB7IEFnQ2hhcnRzQmFzZSB9IGZyb20gJy4vYWctY2hhcnRzLWJhc2UnO1xuXG4vLyBub2luc3BlY3Rpb24gQW5ndWxhckluY29ycmVjdFRlbXBsYXRlRGVmaW5pdGlvblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZy1nYXVnZScsXG4gICAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgICB0ZW1wbGF0ZTogJycsXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbn0pXG5leHBvcnQgY2xhc3MgQWdHYXVnZSBleHRlbmRzIEFnQ2hhcnRzQmFzZTxBZ0dhdWdlT3B0aW9ucz4ge1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIG9wdGlvbnM6IEFnR2F1Z2VPcHRpb25zID0geyB0eXBlOiAncmFkaWFsLWdhdWdlJywgdmFsdWU6IDAgfTtcblxuICAgIEBPdXRwdXQoKVxuICAgIHB1YmxpYyBvbkNoYXJ0UmVhZHk6IEV2ZW50RW1pdHRlcjxBZ0NoYXJ0SW5zdGFuY2U+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGVsZW1lbnREZWY6IEVsZW1lbnRSZWYsXG4gICAgICAgIHByb3RlY3RlZCBuZ1pvbmU6IE5nWm9uZVxuICAgICkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9uYXRpdmVFbGVtZW50ID0gZWxlbWVudERlZi5uYXRpdmVFbGVtZW50O1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBjcmVhdGVDaGFydChvcHRpb25zOiBBZ0dhdWdlT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gQWdDaGFydHNBUEkuY3JlYXRlR2F1Z2Uob3B0aW9ucyk7XG4gICAgfVxufVxuIl19