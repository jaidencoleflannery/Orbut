import type { Point } from '../../scene/point';
import type { ChartAxis } from '../chartAxis';
import type { ProcessedDataDef } from '../data/dataModel';
import type { Series, SeriesNodePickIntent } from './series';
import type { SeriesNodeDatum } from './seriesTypes';
export declare function convertValuesToScaleByDefs<T extends string>({ defs, values, xAxis, yAxis, }: {
    defs: [string, ProcessedDataDef][];
    values: Record<T, unknown>;
    xAxis: ChartAxis | undefined;
    yAxis: ChartAxis | undefined;
}): Record<T, number>;
type PickedNode = {
    series: Series<any, any>;
    datum: SeriesNodeDatum;
    distance: number;
};
export declare function pickNode(inputSeries: Series<any, any>[], point: Point, intent: SeriesNodePickIntent, exactMatchOnly?: boolean): PickedNode | undefined;
export {};
