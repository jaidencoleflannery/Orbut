import { BBox } from '../../scene/bbox';
import type { Point } from '../../scene/point';
import { Path } from '../../scene/shape/path';
import type { CanvasContext } from '../../scene/shape/shape';
export type MarkerPathMove = {
    x: number;
    y: number;
    t?: 'move';
};
declare class InternalMarker extends Path {
    x: number;
    y: number;
    size: number;
    private isBuiltIn;
    protected computeBBox(): BBox;
    protected applyPath(s: number, moves: MarkerPathMove[]): void;
    protected executeFill(ctx: CanvasContext, path?: Path2D | undefined): void;
    protected executeStroke(ctx: CanvasContext, path?: Path2D | undefined): void;
}
declare const Marker_base: new (...args: any[]) => import("../../scene/transformable").RotatableType<import("../../scene/transformable").ScalableType<import("../../scene/transformable").TranslatableType<InternalMarker>>>;
export declare class Marker extends Marker_base {
    static readonly center: Point;
}
export {};
