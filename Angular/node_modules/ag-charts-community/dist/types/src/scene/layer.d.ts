import { Group } from './group';
import type { LayersManager, ZIndexSubOrder } from './layersManager';
import { type ChildNodeCounts, RedrawType, type RenderContext } from './node';
export declare class Layer extends Group {
    protected readonly opts?: {
        name?: string | undefined;
        zIndex?: number | undefined;
        zIndexSubOrder?: ZIndexSubOrder | undefined;
        deriveZIndexFromChildren?: boolean | undefined;
    } | undefined;
    static className: string;
    static is(value: unknown): value is Layer;
    private layer?;
    private lastBBox?;
    constructor(opts?: {
        name?: string | undefined;
        zIndex?: number | undefined;
        zIndexSubOrder?: ZIndexSubOrder | undefined;
        deriveZIndexFromChildren?: boolean | undefined;
    } | undefined);
    markDirty(type?: RedrawType): void;
    preRender(): ChildNodeCounts;
    protected debugSkip(renderCtx: RenderContext): void;
    render(renderCtx: RenderContext): void;
    private deriveZIndexFromChildren;
    _setLayerManager(layersManager?: LayersManager): void;
    private getComputedOpacity;
    private getVisibility;
    protected onVisibleChange(): void;
    protected onZIndexChange(): void;
}
declare const TranslatableLayer_base: new (...args: any[]) => import("./transformable").TranslatableType<Layer>;
export declare class TranslatableLayer extends TranslatableLayer_base {
}
export {};
