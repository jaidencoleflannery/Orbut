import { BBox } from '../../scene/bbox';
import { Node } from '../../scene/node';
import type { BBoxContainsTester, BBoxProvider, BBoxValues } from '../../util/bboxinterface';
export declare enum REGIONS {
    NAVIGATOR = "navigator",
    ROOT = "root",
    SERIES = "series",
    HORIZONTAL_AXES = "horizontal-axes",
    VERTICAL_AXES = "vertical-axes"
}
export type RegionName = `${REGIONS}`;
export type RegionBBoxProvider = BBoxProvider<BBoxContainsTester & BBoxValues>;
export declare class NodeRegionBBoxProvider implements RegionBBoxProvider {
    private readonly node;
    private readonly overrideId?;
    constructor(node: Node, overrideId?: string | undefined);
    get id(): string;
    get visible(): boolean;
    toCanvasBBox(): BBox;
    fromCanvasPoint(x: number, y: number): {
        x: number;
        y: number;
    };
}
export declare class SimpleRegionBBoxProvider extends NodeRegionBBoxProvider {
    private readonly bboxFn;
    constructor(node: Node, bboxFn: () => BBox, overrideId?: string);
    toCanvasBBox(): BBox;
}
