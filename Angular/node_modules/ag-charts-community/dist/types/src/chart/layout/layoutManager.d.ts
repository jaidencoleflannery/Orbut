import type { LayoutContext as ILayoutContext } from '../../module/baseModule';
import type { Scale } from '../../scale/scale';
import { BBox } from '../../scene/bbox';
import { type EventListener } from '../../util/eventEmitter';
import type { TimeInterval } from '../../util/time';
import type { ChartAxisDirection } from '../chartAxisDirection';
export interface AxisLayout {
    id: string;
    rect: BBox;
    gridPadding: number;
    seriesAreaPadding: number;
    tickSize: number;
    label: {
        fractionDigits: number;
        padding: number;
        format?: string;
    };
    direction: ChartAxisDirection;
    domain: any[];
    scale: Scale<any, any, number | TimeInterval>;
}
export interface LayoutCompleteEvent {
    type: 'layout:complete';
    chart: {
        width: number;
        height: number;
    };
    series: {
        rect: BBox;
        paddedRect: BBox;
        visible: boolean;
        shouldFlipXY?: boolean;
    };
    clipSeries: boolean;
    axes?: AxisLayout[];
}
export interface LayoutState {
    axes?: AxisLayout[];
    clipSeries?: boolean;
    series: {
        visible: boolean;
        rect: BBox;
        paddedRect: BBox;
        shouldFlipXY?: boolean;
    };
}
interface EventMap {
    'layout:complete': LayoutCompleteEvent;
}
export declare enum LayoutElement {
    Caption = 0,
    Legend = 1,
    Toolbar = 2,
    Navigator = 3,
    Overlay = 4
}
export declare class LayoutManager {
    private readonly events;
    private readonly elements;
    addListener<K extends keyof EventMap>(eventName: K, listener: EventListener<EventMap[K]>): () => void;
    registerElement(element: LayoutElement, listener: EventListener<LayoutContext>): () => boolean | undefined;
    createContext(width: number, height: number): LayoutContext;
    emitLayoutComplete(context: LayoutContext, options: LayoutState): void;
}
declare class LayoutContext implements ILayoutContext {
    readonly width: number;
    readonly height: number;
    readonly layoutBox: BBox;
    constructor(width: number, height: number);
}
export {};
