import { Node } from '../../scene/node';
import type { InteractionManager, PointerInteractionEvent, PointerInteractionTypes } from './interactionManager';
import { InteractionState } from './interactionManager';
import { NodeRegionBBoxProvider, type RegionBBoxProvider, type RegionName } from './regions';
type TypeInfo = {
    [K in PointerInteractionTypes]: PointerInteractionEvent<K> & RegionEventMixins;
};
type RegionEventMixins = {
    region: RegionName;
    bboxProviderId?: string;
    regionOffsetX: number;
    regionOffsetY: number;
};
export type RegionEvent<T extends PointerInteractionTypes = PointerInteractionTypes> = PointerInteractionEvent & RegionEventMixins & {
    type: T;
};
export interface RegionProperties {
    readonly name: RegionName;
    bboxproviders: RegionBBoxProvider[];
}
type RegionNodeType = NodeRegionBBoxProvider | Node | {
    id: string;
    node: Node;
};
export declare class RegionManager {
    private readonly interactionManager;
    private readonly debug;
    private current?;
    private isDragging;
    private leftCanvas;
    private readonly regions;
    private readonly destroyFns;
    private readonly allRegionsListeners;
    constructor(interactionManager: InteractionManager);
    destroy(): void;
    addRegion(name: RegionName, ...nodes: RegionNodeType[]): {
        addListener<T extends "click" | "contextmenu" | "dblclick" | "drag" | "wheel" | "drag-start" | "drag-end" | "hover" | "leave" | "enter" | "page-left">(type: T, handler: (event: TypeInfo[T]) => void, triggeringStates?: InteractionState): () => void;
    };
    updateRegion(name: RegionName, ...nodes: RegionNodeType[]): void;
    getRegion(name: RegionName): {
        addListener<T extends "click" | "contextmenu" | "dblclick" | "drag" | "wheel" | "drag-start" | "drag-end" | "hover" | "leave" | "enter" | "page-left">(type: T, handler: (event: TypeInfo[T]) => void, triggeringStates?: InteractionState): () => void;
    };
    listenAll<T extends RegionEvent['type']>(type: T, handler: (event: TypeInfo[T]) => void, triggeringStates?: InteractionState): () => void;
    private makeObserver;
    private checkPointerHistory;
    private dispatch;
    private handleDragging;
    private processPointerEvent;
    private pickRegion;
}
export {};
