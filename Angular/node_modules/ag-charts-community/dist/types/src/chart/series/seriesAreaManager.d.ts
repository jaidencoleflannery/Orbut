import type { TranslatableGroup } from '../../scene/group';
import type { TypedEvent } from '../../util/observable';
import { BaseManager } from '../baseManager';
import type { ChartContext } from '../chartContext';
import type { ChartHighlight } from '../chartHighlight';
import { ChartUpdateType } from '../chartUpdateType';
import type { ChartOverlays } from '../overlay/chartOverlays';
import { Tooltip } from '../tooltip/tooltip';
import { type Series } from './series';
import type { SeriesProperties } from './seriesProperties';
import type { SeriesNodeDatum } from './seriesTypes';
export interface SeriesAreaChartDependencies {
    fireEvent<TEvent extends TypedEvent>(event: TEvent): void;
    getUpdateType(): ChartUpdateType;
    chartType: 'cartesian' | 'polar' | 'hierarchy' | 'topology' | 'flow-proportion' | 'standalone' | 'gauge';
    seriesRoot: TranslatableGroup;
    ctx: ChartContext;
    tooltip: Tooltip;
    highlight: ChartHighlight;
    overlays: ChartOverlays;
}
export declare class SeriesAreaManager extends BaseManager {
    private readonly chart;
    readonly id: string;
    private series;
    private seriesRect?;
    private hoverRect?;
    private readonly ariaLabel;
    private readonly highlight;
    private readonly tooltip;
    /**
     * A11y Requirements for Tooltip/Highlight (see AG-13051 for details):
     *
     *   -   When the series-area is blurred, always the mouse to update the tooltip/highlight.
     *
     *   -   When the series-area receives a `focus` event, use `:focus-visible` to guess the input device.
     *       (this is decided by the browser).
     *
     *   -   For keyboard users, `focus` and `keydown` events always updates & shows the tooltip/highlight on
     *       the currently (or newly) focused datum.
     *
     *   -   For keyboard users, `mousemove` events update the tooltip/highlight iff `pickNode` finds a match
     *       for the mouse event offsets.
     */
    private hoverDevice;
    private readonly focus;
    constructor(chart: SeriesAreaChartDependencies);
    dataChanged(): void;
    private preSceneRender;
    private update;
    seriesChanged(series: Series<SeriesNodeDatum, SeriesProperties<object>>[]): void;
    private layoutComplete;
    private onContextMenu;
    private onLeave;
    private onHover;
    private onHoverLikeEvent;
    private onClick;
    private onFocus;
    private onBlur;
    private onNavVert;
    private onNavHori;
    private onSubmit;
    private checkSeriesNodeClick;
    private refreshFocus;
    private handleFocus;
    private handleSeriesFocus;
    private handleHierarchySeriesFocus;
    private updatePickedFocus;
    private getDatumAriaText;
    private clearHighlight;
    private clearTooltip;
    private clearAll;
    private readonly hoverScheduler;
    private handleHoverHighlight;
    private handleHoverTooltip;
    private changeHighlightDatum;
}
